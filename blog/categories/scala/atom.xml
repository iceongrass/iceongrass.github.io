<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Ice Write Blog]]></title>
  <link href="http://iceongrass.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://iceongrass.github.io/"/>
  <updated>2014-03-15T22:41:42+08:00</updated>
  <id>http://iceongrass.github.io/</id>
  <author>
    <name><![CDATA[iceongrass]]></name>
    <email><![CDATA[iceongrass@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala学习笔记（2）]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/27/scalalearningnote2/"/>
    <updated>2013-11-27T17:15:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/27/scalalearningnote2</id>
    <content type="html"><![CDATA[<h2>数组专题</h2>

<p>无论是什么编程语言，数组无疑是最重要的数据结构之一，这节主要是关于scala中数组操作的用法和与其他语言的不同。</p>

<!--more-->


<hr />

<p>Scala中，数组按照长度固定与否可以分为两类，定长的使用Array，长度有可能变化的可以使用ArrayBuffer。例如：</p>

<p><code>scala
val nums = new Array[Int](10)
  // 包含10个Int对象的数组，所有元素初始化为null
val s = Array("Hello ","World")
  // 如果数组内的元素已经确定了个数和类型就不需要new，直接用等号连接即可
s(0) = "Goodbye "
  // 访问元素使用( )而不是[ ]
</code></p>

<p>对于变长数组：</p>

<p><code>scala
import scala.collection.mutable.ArrayBuffer
val b = ArragBuffer[Int]()
  // 定义一个空的整形数组缓冲
b += (1,2,3,4)
  // 向缓冲区的尾部加入元素
b += Array(5,6,7)
  // 向缓冲区的尾部加入一个数组
b.trimEnd(5)
  // 移除缓冲区的最后五个元素
</code></p>

<p>加入、删除等方法的名称与java的一样，这里不过多描述。需要提一下的是数组和数组缓冲是可以相互转化的。</p>

<p><code>scala
b.toArray  // Array(1,2)
s.toBuffer // ArrayBuffer("Goodbye ", "World)
</code></p>

<p>有一个方法比较有意思，原型是</p>

<p><code>scala
def count(p:(A) =&gt; Boolean) : Int
</code></p>

<p>一开始看字面意思还以为是计算数组中的元素个数，其实不是。这个方法接受一个返回值为Boolean型的函数（或许表达式更为合适）作为参数，作用是统计列表中有多少元素在应用该函数后返回true。比如说<code>a.count(_ &gt; 0)</code>就用于统计数组a中有多少元素是正数。</p>

<p>Scala同样支持多维数组，定义方法为：</p>

<p><code>scala
val matrix = Array.hi[Double](3,4)  // 三行四列
matrix(2)(3) = 12                   // 对第二行三列的元素赋值
</code></p>

<p>有意思的是可以创建不规则的数组，每一行长度都不相同：</p>

<p><code>scala
val triangle = new Array[Array[Int]](10)
for(i &lt;- 0 until tiangle.lenght)
  triangle(i) = new Array[Int] (i + 1)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala 学习笔记（1）]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/23/scalastudynote1/"/>
    <updated>2013-11-23T22:54:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/23/scalastudynote1</id>
    <content type="html"><![CDATA[<p>接触Scala已经有一段时间时间了，但是没有从基础开始学起总是觉得缺些什么。于是入手了《快学Scala》准备系统学习，顺便一边学一边记记笔记吧。</p>

<!--more-->


<hr />

<h2>语法上的差异</h2>

<p>简单的语法方面的内容，之前的<a href="http://iceongrass.com/blog/2013/11/11/scalahen-shen-qi/">《Scala很神奇》</a>中简单的提到了一些，总结一下的话大概有这么几点：</p>

<ul>
<li>除了val（常量）和var（变量）以外，在scala shell中的任何代码段和表达式都会被分配给一个名称，可以通过这些明称直接访问名称内的值，比如说</li>
</ul>


<p><code>scala
scala&gt; val tmp = 8 * 2 + 3
res0: Int = 19
scala&gt; res0 + 8
res1: Int = 27
</code></p>

<ul>
<li>如上例所示，变量和函数在声明的时候并不需要人为指定变量类型（递归函数除外）。但若要指定类型可以这样：</li>
</ul>


<p><code>scala
def sum(a:Int, b:Int) : Int = a + b
</code></p>

<ul>
<li><p>数据类型方面，区别于java，scala中没有基本类型，所有的类型（包括Int，Float，Boolean等）都是类。</p></li>
<li><p>关于操作符，个人感觉scala中的设计到运算操作符似乎全都被重载过。最典型的一个表达式<code>a + b</code>实际上可以理解为<code>a.+(b)</code>。实际上操作符<code>+</code>本身已经不是个运算符了，而是一个Int对象a的方法。这在Java中是不被允许的。（所以从这个角度来讲，scala要比java更加面向对象的）</p></li>
<li><p>引用外部库的时候，java库是可以直接import使用的，过程中的区别大概只是如果你想<code>import java.lang.math.*</code>，那么现在你需要<code>import java.lang.math._</code></p></li>
</ul>


<p>这当然不全了，我才读到第三章而已，以后发现了再补充哈。</p>

<hr />

<h2>代码结构和函数</h2>

<p>相对于Java、C++中语句（执行动作）和表达式（数值计算）作用的不同，scala中所有的语法结构似乎都是为了求值而存在的。这里我也总结了几点差异：</p>

<ol>
<li>if表达式是带值的。</li>
<li>代码块也带值，一般式最后一个表达式的计算结果。</li>
<li><code>;</code>这个东西在scala中是不必要的。你当然可以像是在java中那样使用<code>;</code>，但如果你不是想把多个表达式放在同一行的话，那基本上是没必要用的。</li>
<li>void类型在scala中是Unit。</li>
<li>return这个东西尽量不要出现，默认语法块的最后一个表达式回返回计算值。</li>
<li>没有编译检查。</li>
<li><code>i &lt;- expr</code>表示用i去遍历右边的表达式，该表达式的值一般为一个容器（collection）。</li>
<li>函数按功能可以分为两类，计算用的函数是要计算和返回值的；另一种函数只是去做了一件事情（可以称作副作用），而它的返回值没有意义，这样的函数一般返回Unit类型。函数定义的时候，前者的定义和代码需要通过<code>=</code>连接，后者则省略了<code>=</code>。</li>
<li>Scala中有一个‘懒值‘的概念，表现为变量声明时：</li>
</ol>


<p><code>scala
lazy val word = io.Source.fromFile("/A/Reachable/Path/File.txt").mkString
</code></p>

<p>这段代码在不被求值的时候是不会被初始化的，所以在代码在执行的过程中，如果word的值从来没有被用到，那么即使后面填的文件路径是错的也不会有异常被抛出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala很神奇]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/11/scalahen-shen-qi/"/>
    <updated>2013-11-11T01:25:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/11/scalahen-shen-qi</id>
    <content type="html"><![CDATA[<p>起初听到这个名词是在公司里，组内的技术大牛说这玩意是未来的语言。各种社区里也把scala吹的是神乎其神，可惜一整年忙于乱七八糟的事情一直没有机会深入了解。托csdn的福，没有让我赋闲在家的这段时间过于无聊，也开始接触了这门全新的语言。</p>

<!--more-->


<hr />

<h2>嘛是Scala？</h2>

<p>这玩意是跑在Java上的。代码可以与Java的代码无缝对接，语法格式某种程度上与python相似。这是一种类lisp的函数式语言，可以写的很像python和Java，也可以写的像楚留香……</p>

<p>如果你用Java写过代码，又了解些python方面的语法和特点，你看到用Scala写出的代码大概不会太难理解。废话少说，给个例子：</p>

<p>```scala
def printArgs(args:Array[String]) : Unit = {
  var i = 0;
  while(i &lt; args.length) {</p>

<pre><code>println(args(i))
i += 1
</code></pre>

<p>  }
}</p>

<p>printArgs(args);
```
代码本身很简单，就是接收参数，然后把参数中的string逐行打印。语法特点相信大家应该也注意到了，scala中变量的类型声明和函数返回值类型是通过：后跟变量类型的方式完成的。Coding的时候，一条语句时“；”可选，代码块的缩进默认为两个空格执行。代码风格上scala讲究极简，能省略的就省略。</p>

<p>其实这些都好理解，最大的不同大概在于函数定义的方式上吧。函数式编程的理念就是”函数是第一公民“。Java中一切都是对象，定义函数一般通过“方法”的形式定义在类中。所以Scala在对待函数的方式上更像python。区别在于，python的函数名就是个symbol，而scala中的“=”让函数名更像是一个容器，装函数的容器。当然，这么说有些不严密，因为python中也是有lamda的^_^</p>

<p>函数执行结果是这个样字的：
<code>bash
$ scala printArgs.scala hi , world !
hi
,
world
!
</code>
然而，我给出的这个例子并不是真正的scala式编程。函数式的编程风格一般不喜欢变量（var）而更倾向于常量（var）更多情况下，他们会这样写代码：
```scala
def printArgs(args:Array[String]) = args.foreach(println)</p>

<p>printArgs(args)
```
很飘逸，是不？一个变量没有，对象调用方法时println直接作为参数传入，要理解这个语句（如果您至少有个大学结业证的话）只要靠读的就好：把args中的每一个都用println搞一遍。</p>

<p>好吧，如果你觉得上面这个例子不够分量，那我们再来个稍微复杂些的例子。</p>

<hr />

<h2>另一个例子</h2>

<p>对于IT男来说，除了“hello world”和苍井空之外比较广为人知的，Fibonacci数列肯定算一个。相信大家入门时都写过这个算法，这里我给大家看看scala的实现。
<code>scala
def fib(n: Int) = n match {
  case 0 =&gt; 0
  case 1 =&gt; 1
  case _ =&gt; fib(n-1) + fib(n-2)
}
</code>
相信不用我做过多解释各位看官就能理解。然而这并不是一个好的实现，当n比较大的时候，第三个case将产生很深的调用栈，很容易产生栈溢出。比较好的解决方法当然是用尾递归，但是就需要对算法进行修改。
```scala
def fib(tmp1: Int, tmp2: Int, n: Int) = n match {
  case 0 => tmp1
  case 1 => tmp2
  case _ => fib(tmp2, tmp1+tmp2, n-1)
}</p>

<p>println(fib(0, 1, args(0).toInt))  <br/>
<code>
这显然不是段很好看的代码，而且平白无故的多引入了两个参数，语法也不足够的飘逸和简练。首先我得承认，我的修行不够，但从算法来看要实现的话肯定有更好的写法。不过Scala的文档中有一个通过不可变流（Immutable Stream）来生成斐波那契数列的方法倒是值得与大家分享一下。
</code>scala
def fibForm(a: Int, b: Int): Stream[Int] = a #:: fibForm(b, a+b)
println(fibForm(1, 1).take(args(0).toInt).last)
```
简单解释一下。关键部分是“#::“，这并不是一段注释，而是scala中的stream容器内定义的一个方法，其作用是向stream中追加一个元素。第二句的take方法把外部的参数传给fibForm(1, 1)，作用是按照fibForm定义的方式生成含有args(0).toInt个元素的stream，last方法则返回了stream的最后一个元素值。</p>

<p>这段代码其实先是按照传入的参数生成了一个相应数目个元素的数列，然后返回了最后一个元素值，如果只是求值的话空间上有些浪费。</p>

<p>作为初识的话，我觉得写到这里差不多够了。这门语言水很深，还是需要努力学习啊！</p>
]]></content>
  </entry>
  
</feed>
