---
layout: post
title: "Scala 学习笔记（1）"
date: 2013-11-23 22:54
comments: true
categories: Scala
---

接触Scala已经有一段时间时间了，但是没有从基础开始学起总是觉得缺些什么。于是入手了《快学Scala》准备系统学习，顺便一边学一边记记笔记吧。

<!--more-->

----

## 语法上的差异

简单的语法方面的内容，之前的[《Scala很神奇》](http://iceongrass.com/blog/2013/11/11/scalahen-shen-qi/)中简单的提到了一些，总结一下的话大概有这么几点：

- 除了val（常量）和var（变量）以外，在scala shell中的任何代码段和表达式都会被分配给一个名称，可以通过这些明称直接访问名称内的值，比如说
    
```scala
scala> val tmp = 8 * 2 + 3
res0: Int = 19
scala> res0 + 8
res1: Int = 27
```

- 如上例所示，变量和函数在声明的时候并不需要人为指定变量类型（递归函数除外）。但若要指定类型可以这样：

```scala
def sum(a:Int, b:Int) : Int = a + b
```

- 数据类型方面，区别于java，scala中没有基本类型，所有的类型（包括Int，Float，Boolean等）都是类。

- 关于操作符，个人感觉scala中的设计到运算操作符似乎全都被重载过。最典型的一个表达式`a + b`实际上可以理解为`a.+(b)`。实际上操作符`+`本身已经不是个运算符了，而是一个Int对象a的方法。这在Java中是不被允许的。（所以从这个角度来讲，scala要比java更加面向对象的）

- 引用外部库的时候，java库是可以直接import使用的，过程中的区别大概只是如果你想`import java.lang.math.*`，那么现在你需要`import java.lang.math._` 

这当然不全了，我才读到第三章而已，以后发现了再补充哈。

---

## 代码结构和函数

相对于Java、C++中语句（执行动作）和表达式（数值计算）作用的不同，scala中所有的语法结构似乎都是为了求值而存在的。这里我也总结了几点差异：

1. if表达式是带值的。
2. 代码块也带值，一般式最后一个表达式的计算结果。
3. `;`这个东西在scala中是不必要的。你当然可以像是在java中那样使用`;`，但如果你不是想把多个表达式放在同一行的话，那基本上是没必要用的。
4. void类型在scala中是Unit。
5. return这个东西尽量不要出现，默认语法块的最后一个表达式回返回计算值。
6. 没有编译检查。
7. `i <- expr`表示用i去遍历右边的表达式，该表达式的值一般为一个容器（collection）。
8. 函数按功能可以分为两类，计算用的函数是要计算和返回值的；另一种函数只是去做了一件事情（可以称作副作用），而它的返回值没有意义，这样的函数一般返回Unit类型。函数定义的时候，前者的定义和代码需要通过`=`连接，后者则省略了`=`。
9. Scala中有一个‘懒值‘的概念，表现为变量声明时：

```scala
lazy val word = io.Source.fromFile("/A/Reachable/Path/File.txt").mkString
```

这段代码在不被求值的时候是不会被初始化的，所以在代码在执行的过程中，如果word的值从来没有被用到，那么即使后面填的文件路径是错的也不会有异常被抛出来。

